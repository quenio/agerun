{
  "permissions": {
    "allow": [
      "Bash(./ar_*_tests)",
      "Bash(./bin/ar_agent_store_tests:*)",
      "Bash(./check_naming_conventions.sh:*)",
      "Bash(./fix_command_descriptions.sh:*)",
      "Bash(./full_build.sh:*)",
      "Bash(./migrate_remaining_evaluators.sh:*)",
      "Bash(./rename_modules.sh)",
      "Bash(./scripts/analyze-changelog-patterns.sh CHANGELOG.md)",
      "Bash(./scripts/analyze-whitelist.sh log_whitelist.yaml)",
      "Bash(./scripts/calculate-command-scores.sh)",
      "Bash(./scripts/check-docs-conditional-flow.sh)",
      "Bash(./scripts/check-file-hygiene.sh .)",
      "Bash(./scripts/check-module-dependencies.sh allocator)",
      "Bash(./scripts/check-module-dependencies.sh assert)",
      "Bash(./scripts/check-naming-conventions.sh modules/ar_assert.c modules/ar_assert.h)",
      "Bash(./scripts/check-new-learnings-checkpoint.sh)",
      "Bash(./scripts/checkpoint-complete.sh check-commands)",
      "Bash(./scripts/checkpoint-gate.sh check-docs \"Resolution\" \"4\")",
      "Bash(./scripts/checkpoint-gate.sh merge-settings \"Discovery\" \"1\")",
      "Bash(./scripts/checkpoint-init.sh check-commands \"Scan Commands\" \"Validate Structure\" \"Calculate Scores\" \"Identify Issues\" \"Generate Report\")",
      "Bash(./scripts/checkpoint-init.sh check-docs \"Validate Docs\" \"Preview Fixes\" \"Apply Fixes\" \"Verify Resolution\" \"Commit and Push\")",
      "Bash(./scripts/checkpoint-init.sh merge-settings \"Check Files\" \"Read Settings\" \"Merge Permissions\" \"Validate Result\" \"Commit and Cleanup\")",
      "Bash(./scripts/checkpoint-require.sh check-docs)",
      "Bash(./scripts/checkpoint-require.sh merge-settings)",
      "Bash(./scripts/checkpoint-update.sh check-commands 1)",
      "Bash(./scripts/checkpoint-update.sh check-commands 2)",
      "Bash(./scripts/checkpoint-update.sh check-commands 3)",
      "Bash(./scripts/checkpoint-update.sh check-commands 4)",
      "Bash(./scripts/checkpoint-update.sh check-commands 5)",
      "Bash(./scripts/checkpoint-update.sh check-docs 1)",
      "Bash(./scripts/checkpoint-update.sh check-docs 5)",
      "Bash(./scripts/checkpoint-update.sh merge-settings 1)",
      "Bash(./scripts/checkpoint-update.sh merge-settings 2)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 1)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 10)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 11)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 12)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 13)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 14)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 2)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 3)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 4)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 5)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 6)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 7)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 8)",
      "Bash(./scripts/checkpoint-update.sh new-learnings 9)",
      "Bash(./scripts/cleanup-checkpoint.sh new-learnings)",
      "Bash(./scripts/commit-docs.sh)",
      "Bash(./scripts/count-plan-iterations.sh plans/message_routing_via_delegation_plan.md)",
      "Bash(./scripts/detect-circular-dependencies.sh modules)",
      "Bash(./scripts/detect-code-smells.sh modules)",
      "Bash(./scripts/discover-module-relationships.sh)",
      "Bash(./scripts/find-related-content.sh orchestrator checkpoint command script)",
      "Bash(./scripts/find-related-content.sh test assertion)",
      "Bash(./scripts/generate-command-report.sh)",
      "Bash(./scripts/identify-command-issues.sh)",
      "Bash(./scripts/init-checkpoint.sh check-docs \"Validate Docs\" \"Preview Fixes\" \"Apply Fixes\" \"Verify Resolution\" \"Commit and Push\")",
      "Bash(./scripts/init-checkpoint.sh new-learnings '\"\"Identify New Learnings\"\" \"\"Determine KB Article Strategy\"\" \"\"Knowledge Base Article Creation\"\" \"\"Validation Before Saving\"\" \"\"Update Knowledge Base Index\"\" \"\"Update Existing KB Articles (3-5 minimum)\"\" \"\"Review and Update Commands (3-4 minimum)\"\" \"\"Review Existing Guidelines\"\" \"\"Update Guidelines\"\" \"\"Validate Commands with check-commands\"\" \"\"Update CHANGELOG.md\"\" \"\"Validate No Broken Links\"\" \"\"Pre-Commit Integration Verification\"\" \"\"Automatic Commit and Push\"\"')",
      "Bash(./scripts/list-iteration-status.sh plans/message_routing_via_delegation_plan.md)",
      "Bash(./scripts/list-pending-iterations.sh plans/message_routing_via_delegation_plan.md)",
      "Bash(./scripts/plan-sanity-check.sh plans/message_routing_via_delegation_plan.md)",
      "Bash(./scripts/require-checkpoint.sh check-docs)",
      "Bash(./scripts/require-checkpoint.sh new-learnings)",
      "Bash(./scripts/scan-commands.sh)",
      "Bash(./scripts/status-checkpoint.sh check-docs)",
      "Bash(./scripts/status-checkpoint.sh new-learnings)",
      "Bash(./scripts/validate-command-structure.sh)",
      "Bash(./scripts/validate-docs.sh)",
      "Bash(./scripts/validate-kb-links.sh AGENTS.md)",
      "Bash(./scripts/validate-tdd-plan.sh:*)",
      "Bash(./scripts/validate_plan_structure.sh plans/file_delegate_plan.md 15)",
      "Bash(./scripts/verify-docs.sh)",
      "Bash(./scripts/verify-memory-management.sh modules/ar_assert.c)",
      "Bash(./scripts/verify-new-learnings-integration.sh)",
      "Bash(./scripts/verify-test-coverage.sh modules/ar_assert_tests.c)",
      "Bash(./update_docs.sh)",
      "Bash(/private/tmp/fix_init_checkpoint_syntax.sh)",
      "Bash(/private/tmp/replace_checkpoint_calls.sh)",
      "Bash(/private/tmp/replace_checkpoint_calls_round2.sh)",
      "Bash(AGERUN_MEMORY_REPORT=\"memory_report_ar_executable_tests.log\" ./ar_executable_tests)",
      "Bash(awk:*)",
      "Bash(bash /Users/quenio/Repos/agerun/scripts/checkpoint-complete.sh)",
      "Bash(bash /Users/quenio/Repos/agerun/scripts/checkpoint-require.sh)",
      "Bash(bash scripts/checkpoint_cleanup.sh:*)",
      "Bash(bash scripts/checkpoint_gate.sh:*)",
      "Bash(bash scripts/checkpoint_init.sh:*)",
      "Bash(bash scripts/checkpoint_status.sh:*)",
      "Bash(bash scripts/checkpoint_update.sh:*)",
      "Bash(bash scripts/update_checkpoints_in_newlearnings.sh:*)",
      "Bash(cat:*)",
      "Bash(cd:*)",
      "Bash(chmod:*)",
      "Bash(comm:*)",
      "Bash(cut:*)",
      "Bash(diff:*)",
      "Bash(do [ -f \"$article\" ])",
      "Bash(do echo \"  - $file\")",
      "Bash(do echo \"$file:\")",
      "Bash(do echo \"=== $file ===\" grep -n \"init-checkpoint\\.sh\" \"$file\")",
      "Bash(do echo \"=== $file ===\")",
      "Bash(do echo \"=== $plan ===\" grep -E \"^#### Iteration.*- (REVIEWED|REVISED)\" \"$plan\")",
      "Bash(do echo \"=== $plan ===\")",
      "Bash(do grep -l \"Development Workflow\\|Memory Management\\|kb/README\" \"$f\")",
      "Bash(do make checkpoint-update CMD=review-changes STEP=$step)",
      "Bash(do sed -i \"s/^$iter: .*REVIEWED/$iter: ... - IMPLEMENTED/\" /Users/quenio/Repos/agerun/plans/message_routing_via_delegation_plan.md)",
      "Bash(do sed -i '' 's| VERBOSE=--verbose| --verbose|g' \"$file\")",
      "Bash(do)",
      "Bash(done)",
      "Bash(echo:*)",
      "Bash(else)",
      "Bash(exit 0)",
      "Bash(fi)",
      "Bash(find:*)",
      "Bash(for f in bin/run-tests/memory_report_*.log:*)",
      "Bash(for test in :*_tests::*)",
      "Bash(for:*)",
      "Bash(gh api:*)",
      "Bash(gh repo view:*)",
      "Bash(gh run list:*)",
      "Bash(gh run view:*)",
      "Bash(gh run watch:*)",
      "Bash(gh workflow view:*)",
      "Bash(git add:*)",
      "Bash(git check-ignore bin/run-tests/agerun.agency.bak)",
      "Bash(git checkout:*)",
      "Bash(git commit:*)",
      "Bash(git grep:*)",
      "Bash(git log:*)",
      "Bash(git mv:*)",
      "Bash(git push:*)",
      "Bash(git stash:*)",
      "Bash(grep:*)",
      "Bash(head:*)",
      "Bash(if [ ! -f /tmp/check-docs_progress.txt ])",
      "Bash(if [ ! -f /tmp/create-plan_progress.txt ])",
      "Bash(if [ ! -f /tmp/execute-plan_progress.txt ])",
      "Bash(if [ ! -f /tmp/merge-settings_progress.txt ])",
      "Bash(if [ ! -f /tmp/next_priority_progress.txt ])",
      "Bash(if [ ! -f /tmp/review-plan_progress.txt ])",
      "Bash(if [ \"$LOCAL_EXISTS\" = \"NO\" ])",
      "Bash(if [ $? -eq 0 ])",
      "Bash(if [ -f \"$file\" ])",
      "Bash(if [ -f /tmp/check-docs_progress.txt ])",
      "Bash(if [ -f /tmp/new-learnings_progress.txt ])",
      "Bash(if git diff --name-only)",
      "Bash(if git status --porcelain)",
      "Bash(if git status)",
      "Bash(if grep -q \"make checkpoint-\" \"$file\")",
      "Bash(ls:*)",
      "Bash(make checkpoint-cleanup CMD=new-learnings)",
      "Bash(make:*)",
      "Bash(make:bin/agerun_*_tests)",
      "Bash(mv:*)",
      "Bash(nm:*)",
      "Bash(od:*)",
      "Bash(paste:*)",
      "Bash(python scripts/rename_symbols.py:*)",
      "Bash(python3:*)",
      "Bash(readlink:*)",
      "Bash(rg:*)",
      "Bash(rm :*.bak::*)",
      "Bash(rm :*.log::*)",
      "Bash(rm:*)",
      "Bash(rm:./bin/*)",
      "Bash(rm:/tmp/*)",
      "Bash(sed:*)",
      "Bash(sort:*)",
      "Bash(source /tmp/check-docs-stats.txt)",
      "Bash(source /tmp/merge-settings-stats.txt)",
      "Bash(tail:*)",
      "Bash(tee:*)",
      "Bash(test:*)",
      "Bash(then)",
      "Bash(touch:*)",
      "Bash(true)",
      "Bash(uniq:*)",
      "Bash(while read f)",
      "Bash(while read file)",
      "Bash(while read iter)",
      "Bash(xargs ls -t)",
      "Bash(zig build-obj:*)",
      "Bash(zig translate-c:*)",
      "Read(//Users/quenio/**)",
      "Read(//tmp/**)",
      "WebFetch(domain:docs.anthropic.com)",
      "WebFetch(domain:ziglang.org)",
      "WebSearch"
    ],
    "deny": [],
    "defaultMode": "acceptEdits"
  },
  "enableAllProjectMcpServers": false,
  "env": {
    "BASH_DEFAULT_TIMEOUT_MS": "600000",
    "BASH_MAX_TIMEOUT_MS": "900000"
  }
}
